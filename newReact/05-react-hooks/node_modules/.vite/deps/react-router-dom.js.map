{
  "version": 3,
  "sources": ["../../react-router-dom/dom.ts", "../../react-router-dom/index.tsx"],
  "sourcesContent": ["import type {\n  FormEncType,\n  HTMLFormMethod,\n  RelativeRoutingType,\n} from \"@remix-run/router\";\nimport { stripBasename } from \"@remix-run/router\";\n\nexport const defaultMethod: HTMLFormMethod = \"get\";\nconst defaultEncType: FormEncType = \"application/x-www-form-urlencoded\";\n\nexport function isHtmlElement(object: any): object is HTMLElement {\n  return object != null && typeof object.tagName === \"string\";\n}\n\nexport function isButtonElement(object: any): object is HTMLButtonElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\n\nexport function isFormElement(object: any): object is HTMLFormElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\n\nexport function isInputElement(object: any): object is HTMLInputElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\n\ntype LimitedMouseEvent = Pick<\n  MouseEvent,\n  \"button\" | \"metaKey\" | \"altKey\" | \"ctrlKey\" | \"shiftKey\"\n>;\n\nfunction isModifiedEvent(event: LimitedMouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(\n  event: LimitedMouseEvent,\n  target?: string\n) {\n  return (\n    event.button === 0 && // Ignore everything but left clicks\n    (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n  );\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n\nexport function getSearchParamsForLocation(\n  locationSearch: string,\n  defaultSearchParams: URLSearchParams | null\n) {\n  let searchParams = createSearchParams(locationSearch);\n\n  if (defaultSearchParams) {\n    for (let key of defaultSearchParams.keys()) {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach((value) => {\n          searchParams.append(key, value);\n        });\n      }\n    }\n  }\n\n  return searchParams;\n}\n\nexport interface SubmitOptions {\n  /**\n   * The HTTP method used to submit the form. Overrides `<form method>`.\n   * Defaults to \"GET\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * The action URL path used to submit the form. Overrides `<form action>`.\n   * Defaults to the path of the current route.\n   */\n  action?: string;\n\n  /**\n   * The action URL used to submit the form. Overrides `<form encType>`.\n   * Defaults to \"application/x-www-form-urlencoded\".\n   */\n  encType?: FormEncType;\n\n  /**\n   * Set `true` to replace the current entry in the browser's history stack\n   * instead of creating a new one (i.e. stay on \"the same page\"). Defaults\n   * to `false`.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * In browser-based environments, prevent resetting scroll after this\n   * navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n}\n\nexport function getFormSubmissionInfo(\n  target:\n    | HTMLFormElement\n    | HTMLButtonElement\n    | HTMLInputElement\n    | FormData\n    | URLSearchParams\n    | { [name: string]: string }\n    | null,\n  options: SubmitOptions,\n  basename: string\n): {\n  action: string | null;\n  method: string;\n  encType: string;\n  formData: FormData;\n} {\n  let method: string;\n  let action: string | null = null;\n  let encType: string;\n  let formData: FormData;\n\n  if (isFormElement(target)) {\n    let submissionTrigger: HTMLButtonElement | HTMLInputElement = (\n      options as any\n    ).submissionTrigger;\n\n    if (options.action) {\n      action = options.action;\n    } else {\n      // When grabbing the action from the element, it will have had the basename\n      // prefixed to ensure non-JS scenarios work, so strip it since we'll\n      // re-prefix in the router\n      let attr = target.getAttribute(\"action\");\n      action = attr ? stripBasename(attr, basename) : null;\n    }\n    method = options.method || target.getAttribute(\"method\") || defaultMethod;\n    encType =\n      options.encType || target.getAttribute(\"enctype\") || defaultEncType;\n\n    formData = new FormData(target);\n\n    if (submissionTrigger && submissionTrigger.name) {\n      formData.append(submissionTrigger.name, submissionTrigger.value);\n    }\n  } else if (\n    isButtonElement(target) ||\n    (isInputElement(target) &&\n      (target.type === \"submit\" || target.type === \"image\"))\n  ) {\n    let form = target.form;\n\n    if (form == null) {\n      throw new Error(\n        `Cannot submit a <button> or <input type=\"submit\"> without a <form>`\n      );\n    }\n\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n\n    if (options.action) {\n      action = options.action;\n    } else {\n      // When grabbing the action from the element, it will have had the basename\n      // prefixed to ensure non-JS scenarios work, so strip it since we'll\n      // re-prefix in the router\n      let attr =\n        target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n      action = attr ? stripBasename(attr, basename) : null;\n    }\n\n    method =\n      options.method ||\n      target.getAttribute(\"formmethod\") ||\n      form.getAttribute(\"method\") ||\n      defaultMethod;\n    encType =\n      options.encType ||\n      target.getAttribute(\"formenctype\") ||\n      form.getAttribute(\"enctype\") ||\n      defaultEncType;\n\n    formData = new FormData(form);\n\n    // Include name + value from a <button>, appending in case the button name\n    // matches an existing input name\n    if (target.name) {\n      formData.append(target.name, target.value);\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\n      `Cannot submit element that is not <form>, <button>, or ` +\n        `<input type=\"submit|image\">`\n    );\n  } else {\n    method = options.method || defaultMethod;\n    action = options.action || null;\n    encType = options.encType || defaultEncType;\n\n    if (target instanceof FormData) {\n      formData = target;\n    } else {\n      formData = new FormData();\n\n      if (target instanceof URLSearchParams) {\n        for (let [name, value] of target) {\n          formData.append(name, value);\n        }\n      } else if (target != null) {\n        for (let name of Object.keys(target)) {\n          formData.append(name, target[name]);\n        }\n      }\n    }\n  }\n\n  return { action, method: method.toLowerCase(), encType, formData };\n}\n", "/**\n * NOTE: If you refactor this to split up the modules into separate files,\n * you'll need to update the rollup config for react-router-dom-v5-compat.\n */\nimport * as React from \"react\";\nimport type {\n  NavigateOptions,\n  RelativeRoutingType,\n  RouteObject,\n  To,\n} from \"react-router\";\nimport {\n  Router,\n  createPath,\n  useHref,\n  useLocation,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useResolvedPath,\n  unstable_useBlocker as useBlocker,\n  UNSAFE_DataRouterContext as DataRouterContext,\n  UNSAFE_DataRouterStateContext as DataRouterStateContext,\n  UNSAFE_NavigationContext as NavigationContext,\n  UNSAFE_RouteContext as RouteContext,\n  UNSAFE_mapRouteProperties as mapRouteProperties,\n  UNSAFE_useRouteId as useRouteId,\n} from \"react-router\";\nimport type {\n  BrowserHistory,\n  Fetcher,\n  FormEncType,\n  FormMethod,\n  FutureConfig,\n  GetScrollRestorationKeyFunction,\n  HashHistory,\n  History,\n  HTMLFormMethod,\n  HydrationState,\n  Router as RemixRouter,\n  V7_FormMethod,\n} from \"@remix-run/router\";\nimport {\n  createRouter,\n  createBrowserHistory,\n  createHashHistory,\n  joinPaths,\n  stripBasename,\n  ErrorResponse,\n  UNSAFE_invariant as invariant,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\n\nimport type {\n  SubmitOptions,\n  ParamKeyValuePair,\n  URLSearchParamsInit,\n} from \"./dom\";\nimport {\n  createSearchParams,\n  defaultMethod,\n  getFormSubmissionInfo,\n  getSearchParamsForLocation,\n  shouldProcessLinkClick,\n} from \"./dom\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Re-exports\n////////////////////////////////////////////////////////////////////////////////\n\nexport type {\n  FormEncType,\n  FormMethod,\n  GetScrollRestorationKeyFunction,\n  ParamKeyValuePair,\n  SubmitOptions,\n  URLSearchParamsInit,\n  V7_FormMethod,\n};\nexport { createSearchParams };\n\n// Note: Keep in sync with react-router exports!\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  unstable_Blocker,\n  unstable_BlockerFunction,\n  DataRouteMatch,\n  DataRouteObject,\n  Fetcher,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LazyRouteFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  To,\n} from \"react-router\";\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n  createMemoryRouter,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  unstable_useBlocker,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  UNSAFE_DataRouterContext,\n  UNSAFE_DataRouterStateContext,\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext,\n  UNSAFE_useRouteId,\n} from \"react-router\";\n//#endregion\n\ndeclare global {\n  var __staticRouterHydrationData: HydrationState | undefined;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Routers\n////////////////////////////////////////////////////////////////////////////////\n\ninterface DOMRouterOpts {\n  basename?: string;\n  future?: Partial<Omit<FutureConfig, \"v7_prependBasename\">>;\n  hydrationData?: HydrationState;\n  window?: Window;\n}\n\nexport function createBrowserRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createBrowserHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n  }).initialize();\n}\n\nexport function createHashRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createHashHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n  }).initialize();\n}\n\nfunction parseHydrationData(): HydrationState | undefined {\n  let state = window?.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = {\n      ...state,\n      errors: deserializeErrors(state.errors),\n    };\n  }\n  return state;\n}\n\nfunction deserializeErrors(\n  errors: RemixRouter[\"state\"][\"errors\"]\n): RemixRouter[\"state\"][\"errors\"] {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized: RemixRouter[\"state\"][\"errors\"] = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponse(\n        val.status,\n        val.statusText,\n        val.data,\n        val.internal === true\n      );\n    } else if (val && val.__type === \"Error\") {\n      let error = new Error(val.message);\n      // Wipe away the client-side stack trace.  Nothing to fill it in with\n      // because we don't serialize SSR stack traces for security reasons\n      error.stack = \"\";\n      serialized[key] = error;\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n\nexport interface BrowserRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nexport function BrowserRouter({\n  basename,\n  children,\n  window,\n}: BrowserRouterProps) {\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HashRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nexport function HashRouter({ basename, children, window }: HashRouterProps) {\n  let historyRef = React.useRef<HashHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HistoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  history: History;\n}\n\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter({ basename, children, history }: HistoryRouterProps) {\n  const [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nif (__DEV__) {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\n\nexport { HistoryRouter as unstable_HistoryRouter };\n\nexport interface LinkProps\n  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\"> {\n  reloadDocument?: boolean;\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  to: To;\n}\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\n/**\n * The public API for rendering a history-aware <a>.\n */\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      ...rest\n    },\n    ref\n  ) {\n    let { basename } = React.useContext(NavigationContext);\n\n    // Rendered into <a href> for absolute URLs\n    let absoluteHref;\n    let isExternal = false;\n\n    if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n      // Render the absolute href server- and client-side\n      absoluteHref = to;\n\n      // Only check for external origins client-side\n      if (isBrowser) {\n        try {\n          let currentUrl = new URL(window.location.href);\n          let targetUrl = to.startsWith(\"//\")\n            ? new URL(currentUrl.protocol + to)\n            : new URL(to);\n          let path = stripBasename(targetUrl.pathname, basename);\n\n          if (targetUrl.origin === currentUrl.origin && path != null) {\n            // Strip the protocol/origin/basename for same-origin absolute URLs\n            to = path + targetUrl.search + targetUrl.hash;\n          } else {\n            isExternal = true;\n          }\n        } catch (e) {\n          // We can't do external URL detection without a valid URL\n          warning(\n            false,\n            `<Link to=\"${to}\"> contains an invalid URL which will probably break ` +\n              `when clicked - please update to a valid URL path.`\n          );\n        }\n      }\n    }\n\n    // Rendered into <a href> for relative URLs\n    let href = useHref(to, { relative });\n\n    let internalOnClick = useLinkClickHandler(to, {\n      replace,\n      state,\n      target,\n      preventScrollReset,\n      relative,\n    });\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      <a\n        {...rest}\n        href={absoluteHref || href}\n        onClick={isExternal || reloadDocument ? onClick : handleClick}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Link.displayName = \"Link\";\n}\n\nexport interface NavLinkProps\n  extends Omit<LinkProps, \"className\" | \"style\" | \"children\"> {\n  children?:\n    | React.ReactNode\n    | ((props: { isActive: boolean; isPending: boolean }) => React.ReactNode);\n  caseSensitive?: boolean;\n  className?:\n    | string\n    | ((props: {\n        isActive: boolean;\n        isPending: boolean;\n      }) => string | undefined);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: {\n        isActive: boolean;\n        isPending: boolean;\n      }) => React.CSSProperties | undefined);\n}\n\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\nexport const NavLink = React.forwardRef<HTMLAnchorElement, NavLinkProps>(\n  function NavLinkWithRef(\n    {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      children,\n      ...rest\n    },\n    ref\n  ) {\n    let path = useResolvedPath(to, { relative: rest.relative });\n    let location = useLocation();\n    let routerState = React.useContext(DataRouterStateContext);\n    let { navigator } = React.useContext(NavigationContext);\n\n    let toPathname = navigator.encodeLocation\n      ? navigator.encodeLocation(path).pathname\n      : path.pathname;\n    let locationPathname = location.pathname;\n    let nextLocationPathname =\n      routerState && routerState.navigation && routerState.navigation.location\n        ? routerState.navigation.location.pathname\n        : null;\n\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      nextLocationPathname = nextLocationPathname\n        ? nextLocationPathname.toLowerCase()\n        : null;\n      toPathname = toPathname.toLowerCase();\n    }\n\n    let isActive =\n      locationPathname === toPathname ||\n      (!end &&\n        locationPathname.startsWith(toPathname) &&\n        locationPathname.charAt(toPathname.length) === \"/\");\n\n    let isPending =\n      nextLocationPathname != null &&\n      (nextLocationPathname === toPathname ||\n        (!end &&\n          nextLocationPathname.startsWith(toPathname) &&\n          nextLocationPathname.charAt(toPathname.length) === \"/\"));\n\n    let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n\n    let className: string | undefined;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp({ isActive, isPending });\n    } else {\n      // If the className prop is not a function, we use a default `active`\n      // class for <NavLink />s that are active. In v5 `active` was the default\n      // value for `activeClassName`, but we are removing that API and can still\n      // use the old default behavior for a cleaner upgrade path and keep the\n      // simple styling rules working as they currently do.\n      className = [\n        classNameProp,\n        isActive ? \"active\" : null,\n        isPending ? \"pending\" : null,\n      ]\n        .filter(Boolean)\n        .join(\" \");\n    }\n\n    let style =\n      typeof styleProp === \"function\"\n        ? styleProp({ isActive, isPending })\n        : styleProp;\n\n    return (\n      <Link\n        {...rest}\n        aria-current={ariaCurrent}\n        className={className}\n        ref={ref}\n        style={style}\n        to={to}\n      >\n        {typeof children === \"function\"\n          ? children({ isActive, isPending })\n          : children}\n      </Link>\n    );\n  }\n);\n\nif (__DEV__) {\n  NavLink.displayName = \"NavLink\";\n}\n\nexport interface FormProps extends React.FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * The HTTP verb to use when the form is submit. Supports \"get\", \"post\",\n   * \"put\", \"delete\", \"patch\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * Normal `<form action>` but supports React Router's relative paths.\n   */\n  action?: string;\n\n  /**\n   * Forces a full document navigation instead of a fetch.\n   */\n  reloadDocument?: boolean;\n\n  /**\n   * Replaces the current entry in the browser history stack when the form\n   * navigates. Use this if you don't want the user to be able to click \"back\"\n   * to the page with the form on it.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * Prevent the scroll position from resetting to the top of the viewport on\n   * completion of the navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n\n  /**\n   * A function to call when the form is submitted. If you call\n   * `event.preventDefault()` then this form will not do anything.\n   */\n  onSubmit?: React.FormEventHandler<HTMLFormElement>;\n}\n\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (props, ref) => {\n    return <FormImpl {...props} ref={ref} />;\n  }\n);\n\nif (__DEV__) {\n  Form.displayName = \"Form\";\n}\n\ntype HTMLSubmitEvent = React.BaseSyntheticEvent<\n  SubmitEvent,\n  Event,\n  HTMLFormElement\n>;\n\ntype HTMLFormSubmitter = HTMLButtonElement | HTMLInputElement;\n\ninterface FormImplProps extends FormProps {\n  fetcherKey?: string;\n  routeId?: string;\n}\n\nconst FormImpl = React.forwardRef<HTMLFormElement, FormImplProps>(\n  (\n    {\n      reloadDocument,\n      replace,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      fetcherKey,\n      routeId,\n      relative,\n      preventScrollReset,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    let submit = useSubmitImpl(fetcherKey, routeId);\n    let formMethod: HTMLFormMethod =\n      method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n    let formAction = useFormAction(action, { relative });\n    let submitHandler: React.FormEventHandler<HTMLFormElement> = (event) => {\n      onSubmit && onSubmit(event);\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n\n      let submitter = (event as unknown as HTMLSubmitEvent).nativeEvent\n        .submitter as HTMLFormSubmitter | null;\n\n      let submitMethod =\n        (submitter?.getAttribute(\"formmethod\") as HTMLFormMethod | undefined) ||\n        method;\n\n      submit(submitter || event.currentTarget, {\n        method: submitMethod,\n        replace,\n        relative,\n        preventScrollReset,\n      });\n    };\n\n    return (\n      <form\n        ref={forwardedRef}\n        method={formMethod}\n        action={formAction}\n        onSubmit={reloadDocument ? onSubmit : submitHandler}\n        {...props}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  FormImpl.displayName = \"FormImpl\";\n}\n\nexport interface ScrollRestorationProps {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n}\n\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nexport function ScrollRestoration({\n  getKey,\n  storageKey,\n}: ScrollRestorationProps) {\n  useScrollRestoration({ getKey, storageKey });\n  return null;\n}\n\nif (__DEV__) {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\n\nenum DataRouterHook {\n  UseScrollRestoration = \"useScrollRestoration\",\n  UseSubmitImpl = \"useSubmitImpl\",\n  UseFetcher = \"useFetcher\",\n}\n\nenum DataRouterStateHook {\n  UseFetchers = \"useFetchers\",\n  UseScrollRestoration = \"useScrollRestoration\",\n}\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n    preventScrollReset?: boolean;\n    relative?: RelativeRoutingType;\n  } = {}\n): (event: React.MouseEvent<E, MouseEvent>) => void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, { relative });\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => {\n      if (shouldProcessLinkClick(event, target)) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here unless the replace prop is explicitly set\n        let replace =\n          replaceProp !== undefined\n            ? replaceProp\n            : createPath(location) === createPath(path);\n\n        navigate(to, { replace, state, preventScrollReset, relative });\n      }\n    },\n    [\n      location,\n      navigate,\n      path,\n      replaceProp,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      relative,\n    ]\n  );\n}\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(\n  defaultInit?: URLSearchParamsInit\n): [URLSearchParams, SetURLSearchParams] {\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not ` +\n      `support the URLSearchParams API. If you need to support Internet ` +\n      `Explorer 11, we recommend you load a polyfill such as ` +\n      `https://github.com/ungap/url-search-params\\n\\n` +\n      `If you're unsure how to load polyfills, we recommend you check out ` +\n      `https://polyfill.io/v3/ which provides some recommendations about how ` +\n      `to load polyfills only for users that need them, instead of for every ` +\n      `user.`\n  );\n\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n\n  let location = useLocation();\n  let searchParams = React.useMemo(\n    () =>\n      // Only merge in the defaults if we haven't yet called setSearchParams.\n      // Once we call that we want those to take precedence, otherwise you can't\n      // remove a param with setSearchParams({}) if it has an initial value\n      getSearchParamsForLocation(\n        location.search,\n        hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current\n      ),\n    [location.search]\n  );\n\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback<SetURLSearchParams>(\n    (nextInit, navigateOptions) => {\n      const newSearchParams = createSearchParams(\n        typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit\n      );\n      hasSetSearchParamsRef.current = true;\n      navigate(\"?\" + newSearchParams, navigateOptions);\n    },\n    [navigate, searchParams]\n  );\n\n  return [searchParams, setSearchParams];\n}\n\ntype SetURLSearchParams = (\n  nextInit?:\n    | URLSearchParamsInit\n    | ((prev: URLSearchParams) => URLSearchParamsInit),\n  navigateOpts?: NavigateOptions\n) => void;\n\ntype SubmitTarget =\n  | HTMLFormElement\n  | HTMLButtonElement\n  | HTMLInputElement\n  | FormData\n  | URLSearchParams\n  | { [name: string]: string }\n  | null;\n\n/**\n * Submits a HTML `<form>` to the server without reloading the page.\n */\nexport interface SubmitFunction {\n  (\n    /**\n     * Specifies the `<form>` to be submitted to the server, a specific\n     * `<button>` or `<input type=\"submit\">` to use to submit the form, or some\n     * arbitrary data to submit.\n     *\n     * Note: When using a `<button>` its `name` and `value` will also be\n     * included in the form data that is submitted.\n     */\n    target: SubmitTarget,\n\n    /**\n     * Options that override the `<form>`'s own attributes. Required when\n     * submitting arbitrary data without a backing `<form>`.\n     */\n    options?: SubmitOptions\n  ): void;\n}\n\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nexport function useSubmit(): SubmitFunction {\n  return useSubmitImpl();\n}\n\nfunction useSubmitImpl(\n  fetcherKey?: string,\n  fetcherRouteId?: string\n): SubmitFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseSubmitImpl);\n  let { basename } = React.useContext(NavigationContext);\n  let currentRouteId = useRouteId();\n\n  return React.useCallback(\n    (target, options = {}) => {\n      if (typeof document === \"undefined\") {\n        throw new Error(\n          \"You are calling submit during the server render. \" +\n            \"Try calling submit within a `useEffect` or callback instead.\"\n        );\n      }\n\n      let { action, method, encType, formData } = getFormSubmissionInfo(\n        target,\n        options,\n        basename\n      );\n\n      // Base options shared between fetch() and navigate()\n      let opts = {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        formMethod: method as HTMLFormMethod,\n        formEncType: encType as FormEncType,\n      };\n\n      if (fetcherKey) {\n        invariant(\n          fetcherRouteId != null,\n          \"No routeId available for useFetcher()\"\n        );\n        router.fetch(fetcherKey, fetcherRouteId, action, opts);\n      } else {\n        router.navigate(action, {\n          ...opts,\n          replace: options.replace,\n          fromRouteId: currentRouteId,\n        });\n      }\n    },\n    [router, basename, fetcherKey, fetcherRouteId, currentRouteId]\n  );\n}\n\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nexport function useFormAction(\n  action?: string,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  let { basename } = React.useContext(NavigationContext);\n  let routeContext = React.useContext(RouteContext);\n  invariant(routeContext, \"useFormAction must be used inside a RouteContext\");\n\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = { ...useResolvedPath(action ? action : \".\", { relative }) };\n\n  // Previously we set the default action to \".\". The problem with this is that\n  // `useResolvedPath(\".\")` excludes search params and the hash of the resolved\n  // URL. This is the intended behavior of when \".\" is specifically provided as\n  // the form action, but inconsistent w/ browsers when the action is omitted.\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to these directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    // or hash\n    path.search = location.search;\n    path.hash = location.hash;\n\n    // When grabbing search params from the URL, remove the automatically\n    // inserted ?index param so we match the useResolvedPath search behavior\n    // which would not include ?index\n    if (match.route.index) {\n      let params = new URLSearchParams(path.search);\n      params.delete(\"index\");\n      path.search = params.toString() ? `?${params.toString()}` : \"\";\n    }\n  }\n\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\nfunction createFetcherForm(fetcherKey: string, routeId: string) {\n  let FetcherForm = React.forwardRef<HTMLFormElement, FormProps>(\n    (props, ref) => {\n      return (\n        <FormImpl\n          {...props}\n          ref={ref}\n          fetcherKey={fetcherKey}\n          routeId={routeId}\n        />\n      );\n    }\n  );\n  if (__DEV__) {\n    FetcherForm.displayName = \"fetcher.Form\";\n  }\n  return FetcherForm;\n}\n\nlet fetcherId = 0;\n\nexport type FetcherWithComponents<TData> = Fetcher<TData> & {\n  Form: ReturnType<typeof createFetcherForm>;\n  submit: (\n    target: SubmitTarget,\n    // Fetchers cannot replace/preventScrollReset because they are not\n    // navigation events\n    options?: Omit<SubmitOptions, \"replace\" | \"preventScrollReset\">\n  ) => void;\n  load: (href: string) => void;\n};\n\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nexport function useFetcher<TData = any>(): FetcherWithComponents<TData> {\n  let { router } = useDataRouterContext(DataRouterHook.UseFetcher);\n\n  let route = React.useContext(RouteContext);\n  invariant(route, `useFetcher must be used inside a RouteContext`);\n\n  let routeId = route.matches[route.matches.length - 1]?.route.id;\n  invariant(\n    routeId != null,\n    `useFetcher can only be used on routes that contain a unique \"id\"`\n  );\n\n  let [fetcherKey] = React.useState(() => String(++fetcherId));\n  let [Form] = React.useState(() => {\n    invariant(routeId, `No routeId available for fetcher.Form()`);\n    return createFetcherForm(fetcherKey, routeId);\n  });\n  let [load] = React.useState(() => (href: string) => {\n    invariant(router, \"No router available for fetcher.load()\");\n    invariant(routeId, \"No routeId available for fetcher.load()\");\n    router.fetch(fetcherKey, routeId, href);\n  });\n  let submit = useSubmitImpl(fetcherKey, routeId);\n\n  let fetcher = router.getFetcher<TData>(fetcherKey);\n\n  let fetcherWithComponents = React.useMemo(\n    () => ({\n      Form,\n      submit,\n      load,\n      ...fetcher,\n    }),\n    [fetcher, Form, submit, load]\n  );\n\n  React.useEffect(() => {\n    // Is this busted when the React team gets real weird and calls effects\n    // twice on mount?  We really just need to garbage collect here when this\n    // fetcher is no longer around.\n    return () => {\n      if (!router) {\n        console.warn(`No router available to clean up from useFetcher()`);\n        return;\n      }\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n\n  return fetcherWithComponents;\n}\n\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nexport function useFetchers(): Fetcher[] {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return [...state.fetchers.values()];\n}\n\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions: Record<string, number> = {};\n\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration({\n  getKey,\n  storageKey,\n}: {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n} = {}) {\n  let { router } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let { restoreScrollPosition, preventScrollReset } = useDataRouterState(\n    DataRouterStateHook.UseScrollRestoration\n  );\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n\n  // Save positions on pagehide\n  usePageHide(\n    React.useCallback(() => {\n      if (navigation.state === \"idle\") {\n        let key = (getKey ? getKey(location, matches) : null) || location.key;\n        savedScrollPositions[key] = window.scrollY;\n      }\n      sessionStorage.setItem(\n        storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n        JSON.stringify(savedScrollPositions)\n      );\n      window.history.scrollRestoration = \"auto\";\n    }, [storageKey, getKey, navigation.state, location, matches])\n  );\n\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY\n        );\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let disableScrollRestoration = router?.enableScrollRestoration(\n        savedScrollPositions,\n        () => window.scrollY,\n        getKey\n      );\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, getKey]);\n\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(location.hash.slice(1));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n\nexport { useScrollRestoration as UNSAFE_useScrollRestoration };\n\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nexport function useBeforeUnload(\n  callback: (event: BeforeUnloadEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(\n  callback: (event: PageTransitionEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt({ when, message }: { when: boolean; message: string }) {\n  let blocker = useBlocker(when);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n}\n\nexport { usePrompt as unstable_usePrompt };\n\n//#endregion\n"],
  "mappings": "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",
  "names": []
}
